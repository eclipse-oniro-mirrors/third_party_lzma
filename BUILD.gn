# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")

arm64_asm_source = [
    #"Asm/arm64/7zAsm.S",
    #"Asm/arm64/LzmaDecOpt.S"
]

arm_asm_source = [
    #"Asm/arm/7zCrcOpt.asm"
]

x86_asm_source = [
    #"Asm/x86/7zAsm.asm",
    #"Asm/x86/7zCrcOpt.asm",
    #"Asm/x86/AesOpt.asm",
    #"Asm/x86/LzFindOpt.asm",
    #"Asm/x86/LzmaDecOpt.asm",
    #"Asm/x86/Sha256Opt.asm",
    #"Asm/x86/XzCrc64Opt.asm"
]

common_c_source = [
    "C/7zAlloc.c",
    "C/7zArcIn.c",
    "C/7zBuf2.c",
    "C/7zBuf.c",
    "C/7zCrc.c",
    "C/7zCrcOpt.c",
    "C/7zDec.c",
    "C/7zFile.c",
    "C/7zStream.c",
    "C/Aes.c",
    "C/AesOpt.c",
    "C/Alloc.c",
    "C/Bcj2.c",
    "C/Bra86.c",
    "C/Bra.c",
    "C/BraIA64.c",
    "C/CpuArch.c",
    "C/Delta.c",
    "C/LzFind.c",
    "C/Lzma2Dec.c",
    "C/Lzma2Enc.c",
    "C/Lzma86Dec.c",
    "C/Lzma86Enc.c",
    "C/LzmaDec.c",
    "C/LzmaEnc.c",
    "C/LzmaLib.c",
    "C/Ppmd7.c",
    "C/Ppmd7Dec.c",
    "C/Ppmd7Enc.c",
    "C/Sha256.c",
    "C/Sort.c",
    "C/Xz.c",
    "C/XzCrc64.c",
    "C/XzCrc64Opt.c",
    "C/XzDec.c",
    "C/XzEnc.c",
    "C/XzIn.c",
]

# common
config("lzma_config_public") {
    include_dirs = [
        "C",
    ]
    cflags = [
        "-D_7ZIP_ST",
        "-D_7ZIP_AFFINITY_DISABLE",
        "-Wall",
        "-Werror",
        "-Wno-empty-body",
        "-Wno-enum-conversion",
        "-Wno-logical-op-parentheses",
        "-Wno-self-assign",
    ]
    visibility = [ ":*" ]

    if (target_cpu == "arm") {
        include_dirs += [ "Asm/arm" ]
        cflags += [
            "-march=armv8-a+crc",
        ]
    } else if (target_cpu == "arm64") {
        include_dirs += [ "Asm/arm64" ]
        cflags += [
            "-march=armv8-a+crc",
        ]
    } else if (target_cpu == "x64" || target_cpu == "x86_64") {
        include_dirs += [ "Asm/x86" ]
    }
}

config("lzma_config_host") {
}

# host(liunx/win)
config("lzma_config_host_public") {
    defines = []
    include_dirs = [
        "C",
    ]
    defines += [ "target_cpu=${target_cpu}" ]
    defines += [ "host_toolchain=${host_toolchain}" ]
    defines += [ "current_toolchain=${current_toolchain}" ]
    defines += [ "default_toolchain=${default_toolchain}" ]
}

ohos_source_set("lzma_source_arm") {
    configs = [ ":lzma_config_host" ]
    public_configs = [
        ":lzma_config_public",
        ":lzma_config_host_public"
    ]
    sources = common_c_source
    sources += arm_asm_source
}

ohos_source_set("lzma_source_arm64") {
    configs = [ ":lzma_config_host" ]
    public_configs = [
        ":lzma_config_public",
        ":lzma_config_host_public"
    ]
    sources = common_c_source
    sources += arm64_asm_source
}

ohos_source_set("lzma_source_x86") {
    configs = [ ":lzma_config_host" ]
    public_configs = [
        ":lzma_config_public",
        ":lzma_config_host_public"
    ]
    sources = common_c_source
    sources += x86_asm_source
}

ohos_source_set("lzma_source") {
    configs = [ ":lzma_config_public" ]
    sources = common_c_source
    if (target_cpu == "arm") {
        sources += arm_asm_source
    } else if (target_cpu == "arm64") {
        sources += arm64_asm_source
    } else if (target_cpu == "x86_64") {
        sources += x86_asm_source
    }
}

# use for device shared lib
ohos_shared_library("lzma_shared") {
    deps = [ ":lzma_source" ]
    public_configs = [ ":lzma_config_public" ]
    output_name = "lzma"
    install_images = [
        "system",
        "updater"
    ]
    part_name = "lzma"
    subsystem_name = "thirdparty"
}

ohos_static_library("lzma_static") {
    sources = common_c_source
    public_configs = [ ":lzma_config_public" ]
    if (target_cpu == "arm") {
        sources += arm_asm_source
    } else if (target_cpu == "arm64") {
        sources += arm64_asm_source
    } else if (target_cpu == "x86_64") {
        sources += x86_asm_source
    }
    part_name = "lzma"
    subsystem_name = "thirdparty"
}

group("lzma") {
    deps = [
        ":lzma_shared",
        ":lzma_static"
    ]
}